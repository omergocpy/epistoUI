/* tslint:disable */
/* eslint-disable */
/**
 * OpenAPI definition
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from './common';
// @ts-ignore
import { BASE_PATH, BaseAPI, operationServerMap } from './base';
/**
 * SubmissionControllerApi - axios parameter creator
 * @export
 */
export const SubmissionControllerApiAxiosParamCreator = function (configuration) {
    return {
        /**
         *
         * @summary Displays the detailed report of the analysis given the Cape Task ID.
         * @param {number} id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        detail: async (id, options = {}) => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('detail', 'id', id);
            const localVarPath = `/api/submission/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Lists completed analyses.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getComplatedSubmissions: async (options = {}) => {
            const localVarPath = `/api/submission/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Displays the screenshots of the analysis given the Cape Task ID.
         * @param {number} id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        screenshots: async (id, options = {}) => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('screenshots', 'id', id);
            const localVarPath = `/api/submission/{id}/screenshots`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    };
};
/**
 * SubmissionControllerApi - functional programming interface
 * @export
 */
export const SubmissionControllerApiFp = function (configuration) {
    const localVarAxiosParamCreator = SubmissionControllerApiAxiosParamCreator(configuration);
    return {
        /**
         *
         * @summary Displays the detailed report of the analysis given the Cape Task ID.
         * @param {number} id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async detail(id, options) {
            const localVarAxiosArgs = await localVarAxiosParamCreator.detail(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['SubmissionControllerApi.detail']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         *
         * @summary Lists completed analyses.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getComplatedSubmissions(options) {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getComplatedSubmissions(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['SubmissionControllerApi.getComplatedSubmissions']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         *
         * @summary Displays the screenshots of the analysis given the Cape Task ID.
         * @param {number} id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async screenshots(id, options) {
            const localVarAxiosArgs = await localVarAxiosParamCreator.screenshots(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['SubmissionControllerApi.screenshots']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    };
};
/**
 * SubmissionControllerApi - factory interface
 * @export
 */
export const SubmissionControllerApiFactory = function (configuration, basePath, axios) {
    const localVarFp = SubmissionControllerApiFp(configuration);
    return {
        /**
         *
         * @summary Displays the detailed report of the analysis given the Cape Task ID.
         * @param {number} id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        detail(id, options) {
            return localVarFp.detail(id, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary Lists completed analyses.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getComplatedSubmissions(options) {
            return localVarFp.getComplatedSubmissions(options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary Displays the screenshots of the analysis given the Cape Task ID.
         * @param {number} id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        screenshots(id, options) {
            return localVarFp.screenshots(id, options).then((request) => request(axios, basePath));
        },
    };
};
/**
 * uploadFile - object-oriented interface
 * @export
 * @class SubmissionControllerApi
 * @extends {BaseAPI}
 */
export class SubmissionControllerApi extends BaseAPI {
    /**
     *
     * @summary Displays the detailed report of the analysis given the Cape Task ID.
     * @param {number} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SubmissionControllerApi
     */
    detail(id, options) {
        return SubmissionControllerApiFp(this.configuration).detail(id, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @summary Lists completed analyses.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SubmissionControllerApi
     */
    getComplatedSubmissions(options) {
        return SubmissionControllerApiFp(this.configuration).getComplatedSubmissions(options).then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @summary Displays the screenshots of the analysis given the Cape Task ID.
     * @param {number} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SubmissionControllerApi
     */
    screenshots(id, options) {
        return SubmissionControllerApiFp(this.configuration).screenshots(id, options).then((request) => request(this.axios, this.basePath));
    }
}
/**
 * SubmitControllerApi - axios parameter creator
 * @export
 */
export const SubmitControllerApiAxiosParamCreator = function (configuration) {
    return {
        /**
         *
         * @summary Checks whether the same file has been sent before.
         * @param {UploadFileRequest} [uploadFileRequest]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        controlFile: async (uploadFileRequest, options = {}) => {
            const localVarPath = `/api/submit/controlFile`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options };
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            localVarHeaderParameter['Content-Type'] = 'application/json';
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
            localVarRequestOptions.data = serializeDataIfNeeded(uploadFileRequest, localVarRequestOptions, configuration);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Submit a URL task to be analyzed by Tamu Sandbox. Return object will be JSON.
         * @param {string} url
         * @param {string} machine
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        submitUrl: async (url, machine, options = {}) => {
            // verify required parameter 'url' is not null or undefined
            assertParamExists('submitUrl', 'url', url);
            // verify required parameter 'machine' is not null or undefined
            assertParamExists('submitUrl', 'machine', machine);
            const localVarPath = `/api/submit/url`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options };
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            if (url !== undefined) {
                localVarQueryParameter['url'] = url;
            }
            if (machine !== undefined) {
                localVarQueryParameter['machine'] = machine;
            }
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Submit a file task to be analyzed by Tamu Sandbox. Return object will be JSON.
         * @param {string} machine
         * @param {UploadFileRequest} [uploadFileRequest]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        uploadFile: async (machine, uploadFileRequest, options = {}) => {
            // verify required parameter 'machine' is not null or undefined
            assertParamExists('uploadFile', 'machine', machine);
            const localVarPath = `/api/submit`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options };
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            if (machine !== undefined) {
                localVarQueryParameter['machine'] = machine;
            }
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
            localVarRequestOptions.data = serializeDataIfNeeded(uploadFileRequest, localVarRequestOptions, configuration);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Submit a file to try static extractors on it, file won\'t be submited to Virtual Machine. Return object will be JSON.
         * @param {string} machine
         * @param {UploadFileRequest} [uploadFileRequest]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        uploadFileForStaticAnalyze: async (machine, uploadFileRequest, options = {}) => {
            // verify required parameter 'machine' is not null or undefined
            assertParamExists('uploadFileForStaticAnalyze', 'machine', machine);
            const localVarPath = `/api/submit/staticAnalyze`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options };
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            if (machine !== undefined) {
                localVarQueryParameter['machine'] = machine;
            }
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
            localVarRequestOptions.data = serializeDataIfNeeded(uploadFileRequest, localVarRequestOptions, configuration);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary You can send the URL to perform dynamic analysis of files located on a remote server or computer.
         * @param {UrlDto} urlDto
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        uploadFromUrl: async (urlDto, options = {}) => {
            // verify required parameter 'urlDto' is not null or undefined
            assertParamExists('uploadFromUrl', 'urlDto', urlDto);
            const localVarPath = `/api/submit/uploadFromUrl`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options };
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            localVarHeaderParameter['Content-Type'] = 'application/json';
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
            localVarRequestOptions.data = serializeDataIfNeeded(urlDto, localVarRequestOptions, configuration);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    };
};
/**
 * SubmitControllerApi - functional programming interface
 * @export
 */
export const SubmitControllerApiFp = function (configuration) {
    const localVarAxiosParamCreator = SubmitControllerApiAxiosParamCreator(configuration);
    return {
        /**
         *
         * @summary Checks whether the same file has been sent before.
         * @param {UploadFileRequest} [uploadFileRequest]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async controlFile(uploadFileRequest, options) {
            const localVarAxiosArgs = await localVarAxiosParamCreator.controlFile(uploadFileRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['SubmitControllerApi.controlFile']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         *
         * @summary Submit a URL task to be analyzed by Tamu Sandbox. Return object will be JSON.
         * @param {string} url
         * @param {string} machine
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async submitUrl(url, machine, options) {
            const localVarAxiosArgs = await localVarAxiosParamCreator.submitUrl(url, machine, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['SubmitControllerApi.submitUrl']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         *
         * @summary Submit a file task to be analyzed by Tamu Sandbox. Return object will be JSON.
         * @param {string} machine
         * @param {UploadFileRequest} [uploadFileRequest]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async uploadFile(machine, uploadFileRequest, options) {
            const localVarAxiosArgs = await localVarAxiosParamCreator.uploadFile(machine, uploadFileRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['SubmitControllerApi.uploadFile']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         *
         * @summary Submit a file to try static extractors on it, file won\'t be submited to Virtual Machine. Return object will be JSON.
         * @param {string} machine
         * @param {UploadFileRequest} [uploadFileRequest]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async uploadFileForStaticAnalyze(machine, uploadFileRequest, options) {
            const localVarAxiosArgs = await localVarAxiosParamCreator.uploadFileForStaticAnalyze(machine, uploadFileRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['SubmitControllerApi.uploadFileForStaticAnalyze']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         *
         * @summary You can send the URL to perform dynamic analysis of files located on a remote server or computer.
         * @param {UrlDto} urlDto
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async uploadFromUrl(urlDto, options) {
            const localVarAxiosArgs = await localVarAxiosParamCreator.uploadFromUrl(urlDto, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['SubmitControllerApi.uploadFromUrl']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    };
};
/**
 * SubmitControllerApi - factory interface
 * @export
 */
export const SubmitControllerApiFactory = function (configuration, basePath, axios) {
    const localVarFp = SubmitControllerApiFp(configuration);
    return {
        /**
         *
         * @summary Checks whether the same file has been sent before.
         * @param {UploadFileRequest} [uploadFileRequest]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        controlFile(uploadFileRequest, options) {
            return localVarFp.controlFile(uploadFileRequest, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary Submit a URL task to be analyzed by Tamu Sandbox. Return object will be JSON.
         * @param {string} url
         * @param {string} machine
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        submitUrl(url, machine, options) {
            return localVarFp.submitUrl(url, machine, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary Submit a file task to be analyzed by Tamu Sandbox. Return object will be JSON.
         * @param {string} machine
         * @param {UploadFileRequest} [uploadFileRequest]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        uploadFile(machine, uploadFileRequest, options) {
            return localVarFp.uploadFile(machine, uploadFileRequest, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary Submit a file to try static extractors on it, file won\'t be submited to Virtual Machine. Return object will be JSON.
         * @param {string} machine
         * @param {UploadFileRequest} [uploadFileRequest]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        uploadFileForStaticAnalyze(machine, uploadFileRequest, options) {
            return localVarFp.uploadFileForStaticAnalyze(machine, uploadFileRequest, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary You can send the URL to perform dynamic analysis of files located on a remote server or computer.
         * @param {UrlDto} urlDto
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        uploadFromUrl(urlDto, options) {
            return localVarFp.uploadFromUrl(urlDto, options).then((request) => request(axios, basePath));
        },
    };
};
/**
 * SubmitControllerApi - object-oriented interface
 * @export
 * @class SubmitControllerApi
 * @extends {BaseAPI}
 */
export class SubmitControllerApi extends BaseAPI {
    /**
     *
     * @summary Checks whether the same file has been sent before.
     * @param {UploadFileRequest} [uploadFileRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SubmitControllerApi
     */
    controlFile(uploadFileRequest, options) {
        return SubmitControllerApiFp(this.configuration).controlFile(uploadFileRequest, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @summary Submit a URL task to be analyzed by Tamu Sandbox. Return object will be JSON.
     * @param {string} url
     * @param {string} machine
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SubmitControllerApi
     */
    submitUrl(url, machine, options) {
        return SubmitControllerApiFp(this.configuration).submitUrl(url, machine, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @summary Submit a file task to be analyzed by Tamu Sandbox. Return object will be JSON.
     * @param {string} machine
     * @param {UploadFileRequest} [uploadFileRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SubmitControllerApi
     */
    uploadFile(machine, uploadFileRequest, options) {
        return SubmitControllerApiFp(this.configuration).uploadFile(machine, uploadFileRequest, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @summary Submit a file to try static extractors on it, file won\'t be submited to Virtual Machine. Return object will be JSON.
     * @param {string} machine
     * @param {UploadFileRequest} [uploadFileRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SubmitControllerApi
     */
    uploadFileForStaticAnalyze(machine, uploadFileRequest, options) {
        return SubmitControllerApiFp(this.configuration).uploadFileForStaticAnalyze(machine, uploadFileRequest, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @summary You can send the URL to perform dynamic analysis of files located on a remote server or computer.
     * @param {UrlDto} urlDto
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SubmitControllerApi
     */
    uploadFromUrl(urlDto, options) {
        return SubmitControllerApiFp(this.configuration).uploadFromUrl(urlDto, options).then((request) => request(this.axios, this.basePath));
    }
}
/**
 * SyncControllerApi - axios parameter creator
 * @export
 */
export const SyncControllerApiAxiosParamCreator = function (configuration) {
    return {
        /**
         *
         * @summary DONT USE! It is used to synchronize Cape with Tamu Sandbox. It should only be used by the system administrator.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        sycncCapeAndTamu: async (options = {}) => {
            const localVarPath = `/api/sync/all`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary DONT USE! It is used to synchronize Cape with Tamu Sandbox. It should only be used by the system administrator.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        sycncReports: async (options = {}) => {
            const localVarPath = `/api/sync/reports`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary DONT USE! It is used to synchronize Cape with Tamu Sandbox. It should only be used by the system administrator.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        syncDowloadScreenShots: async (options = {}) => {
            const localVarPath = `/api/sync/syncScreenShots`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    };
};
/**
 * SyncControllerApi - functional programming interface
 * @export
 */
export const SyncControllerApiFp = function (configuration) {
    const localVarAxiosParamCreator = SyncControllerApiAxiosParamCreator(configuration);
    return {
        /**
         *
         * @summary DONT USE! It is used to synchronize Cape with Tamu Sandbox. It should only be used by the system administrator.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async sycncCapeAndTamu(options) {
            const localVarAxiosArgs = await localVarAxiosParamCreator.sycncCapeAndTamu(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['SyncControllerApi.sycncCapeAndTamu']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         *
         * @summary DONT USE! It is used to synchronize Cape with Tamu Sandbox. It should only be used by the system administrator.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async sycncReports(options) {
            const localVarAxiosArgs = await localVarAxiosParamCreator.sycncReports(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['SyncControllerApi.sycncReports']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         *
         * @summary DONT USE! It is used to synchronize Cape with Tamu Sandbox. It should only be used by the system administrator.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async syncDowloadScreenShots(options) {
            const localVarAxiosArgs = await localVarAxiosParamCreator.syncDowloadScreenShots(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['SyncControllerApi.syncDowloadScreenShots']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    };
};
/**
 * SyncControllerApi - factory interface
 * @export
 */
export const SyncControllerApiFactory = function (configuration, basePath, axios) {
    const localVarFp = SyncControllerApiFp(configuration);
    return {
        /**
         *
         * @summary DONT USE! It is used to synchronize Cape with Tamu Sandbox. It should only be used by the system administrator.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        sycncCapeAndTamu(options) {
            return localVarFp.sycncCapeAndTamu(options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary DONT USE! It is used to synchronize Cape with Tamu Sandbox. It should only be used by the system administrator.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        sycncReports(options) {
            return localVarFp.sycncReports(options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary DONT USE! It is used to synchronize Cape with Tamu Sandbox. It should only be used by the system administrator.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        syncDowloadScreenShots(options) {
            return localVarFp.syncDowloadScreenShots(options).then((request) => request(axios, basePath));
        },
    };
};
/**
 * SyncControllerApi - object-oriented interface
 * @export
 * @class SyncControllerApi
 * @extends {BaseAPI}
 */
export class SyncControllerApi extends BaseAPI {
    /**
     *
     * @summary DONT USE! It is used to synchronize Cape with Tamu Sandbox. It should only be used by the system administrator.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SyncControllerApi
     */
    sycncCapeAndTamu(options) {
        return SyncControllerApiFp(this.configuration).sycncCapeAndTamu(options).then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @summary DONT USE! It is used to synchronize Cape with Tamu Sandbox. It should only be used by the system administrator.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SyncControllerApi
     */
    sycncReports(options) {
        return SyncControllerApiFp(this.configuration).sycncReports(options).then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @summary DONT USE! It is used to synchronize Cape with Tamu Sandbox. It should only be used by the system administrator.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SyncControllerApi
     */
    syncDowloadScreenShots(options) {
        return SyncControllerApiFp(this.configuration).syncDowloadScreenShots(options).then((request) => request(this.axios, this.basePath));
    }
}
/**
 * VirtualMachineControllerApi - axios parameter creator
 * @export
 */
export const VirtualMachineControllerApiAxiosParamCreator = function (configuration) {
    return {
        /**
         *
         * @summary Lists Virtual Machines.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getMachines: async (options = {}) => {
            const localVarPath = `/api/vm/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    };
};
/**
 * VirtualMachineControllerApi - functional programming interface
 * @export
 */
export const VirtualMachineControllerApiFp = function (configuration) {
    const localVarAxiosParamCreator = VirtualMachineControllerApiAxiosParamCreator(configuration);
    return {
        /**
         *
         * @summary Lists Virtual Machines.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getMachines(options) {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getMachines(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['VirtualMachineControllerApi.getMachines']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    };
};
/**
 * VirtualMachineControllerApi - factory interface
 * @export
 */
export const VirtualMachineControllerApiFactory = function (configuration, basePath, axios) {
    const localVarFp = VirtualMachineControllerApiFp(configuration);
    return {
        /**
         *
         * @summary Lists Virtual Machines.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getMachines(options) {
            return localVarFp.getMachines(options).then((request) => request(axios, basePath));
        },
    };
};
/**
 * VirtualMachineControllerApi - object-oriented interface
 * @export
 * @class VirtualMachineControllerApi
 * @extends {BaseAPI}
 */
export class VirtualMachineControllerApi extends BaseAPI {
    /**
     *
     * @summary Lists Virtual Machines.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof VirtualMachineControllerApgi
     */
    getMachines(options) {
        return VirtualMachineControllerApiFp(this.configuration).getMachines(options).then((request) => request(this.axios, this.basePath));
    }
}
